1.tfidf的思想

TFIDF的主要思想是：如果某个词或短语在一篇文章中出现的频率TF高，
并且在其他文章中很少出现，则认为此词或者短语具有很好的类别区分
能力，适合用来分类。TFIDF实际上是：TF * IDF，TF词频(Term Frequency)，
IDF逆向文件频率(Inverse Document Frequency)。TF表示词条在文档d中出现的频率。
IDF的主要思想是：如果包含词条t的文档越少，也就是n越小，IDF越大，
则说明词条t具有很好的类别区分能力。如果某一类文档C中包含词条t的文档数为m，
而其它类包含t的文档总数为k，显然所有包含t的文档数n=m+k，当m大的时候，n也大，
按照IDF公式得到的IDF的值会小，就说明该词条t类别区分能力不强。
但是实际上，如果一个词条在一个类的文档中频繁出现，
则说明该词条能够很好代表这个类的文本的特征，这样的词条应该给它们赋予较高的权重，
并选来作为该类文本的特征词以区别与其它类文档。
这就是IDF的不足之处. 在一份给定的文件里，词频（term frequency，TF）指的是某一个给定的词语在该文件中出现的频率。
这个数字是对词数(term count)的归一化，以防止它偏向长的文件。（同一个词语在长文件里可能会比短文件有更高的词数，而不管该词语重要与否。

2.程序实现

首先是计算tf的代码：我们使用map来存储tf的结果，
这个地方需要注意的是，
我们先通过分词软件将所有的文档读成一个map，Map< String,String >
其中key是每个文档的文档名，对应的value是分完词后的文档内容，单词以空格分割。
这里我们定义tf的方法传的参数是map中的value值（也就是一个String），
然后计算单词的tf值。


然后计算tfidf的值：这里需要说明的是，在计算idf的时候会涉及到包含某个单词的文档数，所以这里，会将分完词后的map传输进来。
最后用一个Map来存储最后的结果，Map< String>

